{"ast":null,"code":"var _curry2 = require('./internal/_curry2');\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n */\n\n\nmodule.exports = _curry2(function takeLastWhile(fn, list) {\n  var idx = list.length - 1;\n\n  while (idx >= 0 && fn(list[idx])) {\n    idx -= 1;\n  }\n\n  return Array.prototype.slice.call(list, idx + 1);\n});","map":null,"metadata":{},"sourceType":"script"}