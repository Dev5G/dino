{"ast":null,"code":"//import { logout } from '../app/modules/Auth/_redux/actions'\nexport default function setupAxios(axios, store) {\n  //Intercept the request and attach the auth header with \"access_token\"\n  axios.interceptors.request.use(function (config) {\n    var now = Date.now();\n\n    var _store$getState = store.getState(),\n        _store$getState$auth = _store$getState.auth,\n        access_token = _store$getState$auth.access_token,\n        expiresIn = _store$getState$auth.expiresIn;\n\n    var expTime = Math.abs(expiresIn);\n\n    if (expTime < now) {\n      // Expired\n      //store.dispatch(logout())\n      throw new axios.Cancel('Session expired, please log in again');\n    }\n\n    if (access_token) {\n      config.headers.Authorization = \"Bearer \".concat(access_token);\n    }\n\n    return config;\n  }, function (err) {\n    return Promise.reject(err);\n  }); //Intercept response and check if it is valid or not! if not reject promise and add show error\n\n  axios.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    if (error.response.status === 403 || error.response.status === 401) {// store.dispatch(logout())\n    }\n\n    return Promise.reject(error.response);\n  });\n}","map":{"version":3,"sources":["/var/www/web_golden_bits/src/redux/setupAxios.js"],"names":["setupAxios","axios","store","interceptors","request","use","config","now","Date","getState","auth","access_token","expiresIn","expTime","Math","abs","Cancel","headers","Authorization","err","Promise","reject","response","error","status"],"mappings":"AAAA;AACA,eAAe,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;AAC7C;AACAD,EAAAA,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAAAC,MAAM,EAAI;AACN,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AADM,0BAIFL,KAAK,CAACO,QAAN,EAJE;AAAA,+CAGFC,IAHE;AAAA,QAGMC,YAHN,wBAGMA,YAHN;AAAA,QAGoBC,SAHpB,wBAGoBA,SAHpB;;AAKN,QAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASH,SAAT,CAAhB;;AACA,QAAIC,OAAO,GAAGN,GAAd,EAAmB;AACf;AACA;AACA,YAAM,IAAIN,KAAK,CAACe,MAAV,CAAiB,sCAAjB,CAAN;AACH;;AACD,QAAIL,YAAJ,EAAkB;AACdL,MAAAA,MAAM,CAACW,OAAP,CAAeC,aAAf,oBAAyCP,YAAzC;AACH;;AAED,WAAOL,MAAP;AACH,GAjBL,EAkBI,UAAAa,GAAG;AAAA,WAAIC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAJ;AAAA,GAlBP,EAF6C,CAsB7C;;AACAlB,EAAAA,KAAK,CAACE,YAAN,CAAmBmB,QAAnB,CAA4BjB,GAA5B,CACI,UAAAiB,QAAQ,EAAI;AAAE,WAAOA,QAAP;AAAiB,GADnC,EAEI,UAAAC,KAAK,EAAI;AACL,QAAIA,KAAK,CAACD,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiCD,KAAK,CAACD,QAAN,CAAeE,MAAf,KAA0B,GAA/D,EAAoE,CACjE;AACF;;AACD,WAAOJ,OAAO,CAACC,MAAR,CAAeE,KAAK,CAACD,QAArB,CAAP;AACH,GAPL;AASH","sourcesContent":["//import { logout } from '../app/modules/Auth/_redux/actions'\nexport default function setupAxios(axios, store) {\n    //Intercept the request and attach the auth header with \"access_token\"\n    axios.interceptors.request.use(\n        config => {\n            const now = Date.now();\n            const {\n                auth: { access_token, expiresIn },\n            } = store.getState();\n            const expTime = Math.abs(expiresIn);\n            if (expTime < now) {\n                // Expired\n                //store.dispatch(logout())\n                throw new axios.Cancel('Session expired, please log in again')\n            }\n            if (access_token) {\n                config.headers.Authorization = `Bearer ${access_token}`;\n            }\n\n            return config;\n        },\n        err => Promise.reject(err)\n    );\n    //Intercept response and check if it is valid or not! if not reject promise and add show error\n    axios.interceptors.response.use(\n        response => { return response },\n        error => {\n            if (error.response.status === 403 || error.response.status === 401) {\n               // store.dispatch(logout())\n            }\n            return Promise.reject(error.response)\n        }\n    )\n}\n"]},"metadata":{},"sourceType":"module"}