{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nvar getScrollParent = function getScrollParent(node) {\n  var parent = node;\n\n  while (parent = parent.parentElement) {\n    var overflowYVal = getComputedStyle(parent, null).getPropertyValue(\"overflow-y\");\n    if (parent === document.body) return window;\n    if (overflowYVal === \"auto\" || overflowYVal === \"scroll\") return parent;\n  }\n\n  return window;\n};\n\nvar offsetTill = function offsetTill(node, target) {\n  var current = node;\n  var offset = 0; // If target is not an offsetParent itself, subtract its offsetTop and set correct target\n\n  if (target.firstChild && target.firstChild.offsetParent !== target) {\n    offset += node.offsetTop - target.offsetTop;\n    target = node.offsetParent;\n    offset += -node.offsetTop;\n  }\n\n  do {\n    offset += current.offsetTop;\n    current = current.offsetParent;\n  } while (current && current !== target);\n\n  return offset;\n};\n\nvar stickyProp = null;\n\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n  if (CSS.supports(\"position\", \"sticky\")) stickyProp = \"sticky\";else if (CSS.supports(\"position\", \"-webkit-sticky\")) stickyProp = \"-webkit-sticky\";\n} // Inspired by https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n\n\nvar passiveArg = false;\n\ntry {\n  var opts = Object.defineProperty({}, \"passive\", {\n    // eslint-disable-next-line getter-return\n    get: function get() {\n      passiveArg = {\n        passive: true\n      };\n    }\n  });\n  window.addEventListener(\"testPassive\", null, opts);\n  window.removeEventListener(\"testPassive\", null, opts);\n} catch (e) {}\n\nvar StickyBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(StickyBox, _React$Component);\n\n  function StickyBox(props) {\n    var _this = _React$Component.call(this, props) || this;\n\n    _this.registerContainerRef = function (n) {\n      if (!stickyProp) return;\n      _this.node = n;\n\n      if (n) {\n        _this.scrollPane = getScrollParent(_this.node);\n        _this.latestScrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;\n\n        _this.scrollPane.addEventListener(\"scroll\", _this.handleScroll, passiveArg);\n\n        _this.scrollPane.addEventListener(\"mousewheel\", _this.handleScroll, passiveArg);\n\n        if (_this.scrollPane === window) {\n          window.addEventListener(\"resize\", _this.updateViewport);\n\n          _this.updateViewport();\n        } else {\n          _this.rosp = new ResizeObserver(_this.updateScrollPane);\n\n          _this.rosp.observe(_this.scrollPane);\n\n          _this.updateScrollPane();\n        }\n\n        _this.ropn = new ResizeObserver(_this.updateParentNode);\n\n        _this.ropn.observe(_this.node.parentNode);\n\n        _this.updateParentNode();\n\n        _this.ron = new ResizeObserver(_this.updateNode);\n\n        _this.ron.observe(_this.node);\n\n        _this.updateNode({\n          initial: true\n        });\n\n        _this.initial();\n      } else {\n        _this.scrollPane.removeEventListener(\"mousewheel\", _this.handleScroll, passiveArg);\n\n        _this.scrollPane.removeEventListener(\"scroll\", _this.handleScroll, passiveArg);\n\n        if (_this.scrollPane === window) {\n          window.removeEventListener(\"resize\", _this.getMeasurements);\n        } else {\n          _this.rosp.disconnect();\n        }\n\n        _this.ropn.disconnect();\n\n        _this.ron.disconnect();\n\n        _this.scrollPane = null;\n      }\n    };\n\n    _this.updateViewport = function () {\n      _this.viewPortHeight = window.innerHeight;\n      _this.scrollPaneOffset = 0;\n    };\n\n    _this.updateScrollPane = function () {\n      _this.viewPortHeight = _this.scrollPane.offsetHeight;\n\n      if (process.env.NODE_ENV !== \"production\" && _this.viewPortHeight === 0) {\n        console.warn(\"react-sticky-box's scroll pane has a height of 0. This seems odd. Please check this node:\", _this.scrollPane);\n      } // Only applicable if scrollPane is an offsetParent\n\n\n      if (_this.scrollPane.firstChild.offsetParent === _this.scrollPane) {\n        _this.scrollPaneOffset = _this.scrollPane.getBoundingClientRect().top;\n      } else {\n        _this.scrollPaneOffset = 0;\n      }\n    };\n\n    _this.updateParentNode = function () {\n      var parentNode = _this.node.parentNode;\n      var computedParentStyle = getComputedStyle(parentNode, null);\n      var parentPaddingTop = parseInt(computedParentStyle.getPropertyValue(\"padding-top\"), 10);\n      var parentPaddingBottom = parseInt(computedParentStyle.getPropertyValue(\"padding-bottom\"), 10);\n      _this.naturalTop = offsetTill(parentNode, _this.scrollPane) + parentPaddingTop + _this.scrollPaneOffset;\n      var oldParentHeight = _this.parentHeight;\n      _this.parentHeight = parentNode.getBoundingClientRect().height - (parentPaddingTop + parentPaddingBottom);\n\n      if (_this.mode === \"relative\") {\n        // If parent height decreased...\n        if (oldParentHeight > _this.parentHeight) {\n          _this.changeToStickyBottomIfBoxTooLow(_this.latestScrollY);\n        }\n      }\n\n      if (oldParentHeight !== _this.parentHeight && _this.mode === \"relative\") {\n        _this.latestScrollY = Number.POSITIVE_INFINITY;\n\n        _this.handleScroll();\n      }\n    };\n\n    _this.updateNode = function (_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          initial = _ref.initial;\n\n      var prevHeight = _this.nodeHeight;\n      _this.nodeHeight = _this.node.getBoundingClientRect().height;\n\n      if (!initial && prevHeight !== _this.nodeHeight) {\n        _this.mode = undefined;\n\n        var _this$getOffsets = _this.getOffsets(),\n            offsetTop = _this$getOffsets.offsetTop,\n            offsetBottom = _this$getOffsets.offsetBottom;\n\n        if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {\n          // Just make it sticky if node smaller than viewport\n          _this.initial();\n        } else {\n          _this.mode = \"relative\";\n          _this.node.style.position = \"relative\";\n          var lowestPossible = _this.parentHeight - _this.nodeHeight;\n          var current = _this.scrollPaneOffset + _this.latestScrollY - _this.naturalTop + offsetTop;\n          _this.offset = Math.max(0, Math.min(lowestPossible, current));\n          _this.node.style.top = _this.offset + \"px\";\n        }\n      }\n    };\n\n    _this.handleScroll = function () {\n      var _this$getOffsets2 = _this.getOffsets(),\n          offsetTop = _this$getOffsets2.offsetTop,\n          offsetBottom = _this$getOffsets2.offsetBottom;\n\n      var scrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;\n      if (scrollY === _this.latestScrollY) return;\n\n      if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {\n        // Just make it sticky if node smaller than viewport\n        _this.initial();\n\n        _this.latestScrollY = scrollY;\n        return;\n      }\n\n      var scrollDelta = scrollY - _this.latestScrollY;\n\n      if (scrollDelta > 0) {\n        // scroll down\n        if (_this.mode === \"stickyTop\") {\n          _this.offset = Math.max(0, _this.scrollPaneOffset + _this.latestScrollY - _this.naturalTop + offsetTop);\n\n          if (scrollY + _this.scrollPaneOffset + offsetTop > _this.naturalTop) {\n            if (scrollY + _this.scrollPaneOffset + _this.viewPortHeight <= _this.naturalTop + _this.nodeHeight + _this.offset + offsetBottom) {\n              _this.props.onChangeMode(_this.mode, \"relative\");\n\n              _this.mode = \"relative\";\n              _this.node.style.position = \"relative\";\n              _this.node.style.top = _this.offset + \"px\";\n            } else {\n              _this.switchToStickyBottom();\n            }\n          }\n        } else if (_this.mode === \"relative\") {\n          _this.changeToStickyBottomIfBoxTooLow(scrollY);\n        }\n      } else {\n        // scroll up\n        if (_this.mode === \"stickyBottom\") {\n          _this.offset = Math.max(0, _this.scrollPaneOffset + _this.latestScrollY + _this.viewPortHeight - (_this.naturalTop + _this.nodeHeight + offsetBottom));\n\n          if (_this.scrollPaneOffset + scrollY + _this.viewPortHeight < _this.naturalTop + _this.parentHeight + offsetBottom) {\n            if (_this.scrollPaneOffset + scrollY + offsetTop >= _this.naturalTop + _this.offset) {\n              _this.props.onChangeMode(_this.mode, \"relative\");\n\n              _this.mode = \"relative\";\n              _this.node.style.position = \"relative\";\n              _this.node.style.top = _this.offset + \"px\";\n            } else {\n              _this.switchToStickyTop();\n            }\n          }\n        } else if (_this.mode === \"relative\") {\n          if (_this.scrollPaneOffset + scrollY + offsetTop < _this.naturalTop + _this.offset) {\n            _this.switchToStickyTop();\n          }\n        }\n      }\n\n      _this.latestScrollY = scrollY;\n    };\n\n    _this.switchToStickyBottom = function () {\n      var _this$getOffsets3 = _this.getOffsets(),\n          _ = _this$getOffsets3._,\n          offsetBottom = _this$getOffsets3.offsetBottom;\n\n      _this.props.onChangeMode(_this.mode, \"stickyBottom\");\n\n      _this.mode = \"stickyBottom\";\n      _this.node.style.position = stickyProp;\n      _this.node.style.top = _this.viewPortHeight - _this.nodeHeight - offsetBottom + \"px\";\n    };\n\n    _this.switchToStickyTop = function () {\n      var _this$getOffsets4 = _this.getOffsets(),\n          offsetTop = _this$getOffsets4.offsetTop,\n          _ = _this$getOffsets4._;\n\n      _this.props.onChangeMode(_this.mode, \"stickyTop\");\n\n      _this.mode = \"stickyTop\";\n      _this.node.style.position = stickyProp;\n      _this.node.style.top = offsetTop + \"px\";\n    };\n\n    if (props.offset && process.env.NODE_ENV !== \"production\") {\n      console.warn(\"react-sticky-box's \\\"offset\\\" prop is deprecated. Please use \\\"offsetTop\\\" instead. It'll be removed in v0.8.\");\n    }\n\n    return _this;\n  }\n\n  var _proto = StickyBox.prototype;\n\n  _proto.getOffsets = function getOffsets() {\n    var _this$props = this.props,\n        deprecatedOffset = _this$props.offset,\n        propOffsetTop = _this$props.offsetTop,\n        offsetBottom = _this$props.offsetBottom;\n    return {\n      offsetTop: propOffsetTop || deprecatedOffset,\n      offsetBottom: offsetBottom\n    };\n  };\n\n  _proto.initial = function initial() {\n    var bottom = this.props.bottom;\n\n    var _this$getOffsets5 = this.getOffsets(),\n        offsetTop = _this$getOffsets5.offsetTop,\n        offsetBottom = _this$getOffsets5.offsetBottom;\n\n    if (bottom) {\n      if (this.mode !== \"stickyBottom\") {\n        this.props.onChangeMode(this.mode, \"stickyBottom\");\n        this.mode = \"stickyBottom\";\n        this.node.style.position = stickyProp;\n        this.node.style.top = this.viewPortHeight - this.nodeHeight - offsetBottom + \"px\";\n      }\n    } else {\n      if (this.mode !== \"stickyTop\") {\n        this.props.onChangeMode(this.mode, \"stickyTop\");\n        this.mode = \"stickyTop\";\n        this.node.style.position = stickyProp;\n        this.node.style.top = offsetTop + \"px\";\n      }\n    }\n  };\n\n  _proto.changeToStickyBottomIfBoxTooLow = function changeToStickyBottomIfBoxTooLow(scrollY) {\n    var _this$getOffsets6 = this.getOffsets(),\n        offsetBottom = _this$getOffsets6.offsetBottom;\n\n    if (scrollY + this.scrollPaneOffset + this.viewPortHeight >= this.naturalTop + this.nodeHeight + this.offset + offsetBottom) {\n      this.switchToStickyBottom();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        style = _this$props2.style;\n    return React.createElement(\"div\", {\n      className: className,\n      style: style,\n      ref: this.registerContainerRef\n    }, children);\n  };\n\n  return StickyBox;\n}(React.Component);\n\nexport { StickyBox as default };\nStickyBox.defaultProps = {\n  onChangeMode: function onChangeMode() {},\n  offset: 0,\n  offsetTop: 0,\n  offsetBottom: 0\n};\nprocess.env.NODE_ENV !== \"production\" ? StickyBox.propTypes = {\n  onChangeMode: PropTypes.func,\n  offset: PropTypes.number,\n  // deprecated\n  offsetTop: PropTypes.number,\n  offsetBottom: PropTypes.number,\n  bottom: PropTypes.bool\n} : void 0;","map":null,"metadata":{},"sourceType":"module"}